<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Too Busy Coding...]]></title>
  <link href="http://vicfriedman.github.com/atom.xml" rel="self"/>
  <link href="http://vicfriedman.github.com/"/>
  <updated>2013-03-03T15:27:58-05:00</updated>
  <id>http://vicfriedman.github.com/</id>
  <author>
    <name><![CDATA[Victoria Friedman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[webserver 101]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/03/03/webserver-101/"/>
    <updated>2013-03-03T13:38:00-05:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/03/03/webserver-101</id>
    <content type="html"><![CDATA[<p><strong>I can&#8217;t believe how much I&#8217;ve learned in 19 days of class.<strong> My last blog post was about understanding iterations, and now it&#8217;s hard to image a time when that didn&#8217;t make sense to me.</p>

<p> <ul> Highlights of the last few weeks include:
  <li> Hearing <a href="http://steveklabnik.com/"> Steve Klabnik </a> speak about contributing to open source projects and his work on Rails. </li>
  <li> Building my own webserver on <a href="www.dediserve.com"> Dediserve.com </a> with the help of <a href="http://spike.grobste.in/"> Spike Grobstein </a> </li>
  <li> Understanding the breakdown of a MVC. I will never complain about my facebook page taking an extra 2 seconds to load ever again, especially on my mobile device. It really is like magic. </li>
  <li> Learning rails week 1. and my first rails app. </li>
</ul></p>

<p>  While everything I&#8217;ve learned has been absolutely mind blowing, the thing that really hit home for me was how intricate a process it is just to log into facebook, twitter or online banking and have my information load in miliseconds. Along with appreciating how much work just goes into the design and coding to create the page, I also have a deep appreciate for Sysadmins, who&#8217;s sole role is to keep your site up and running on a live server. Building a web server and grasping the complexity of the call and response that goes on behind the spaces was eye-opening. This post will cover setting up your server, connecting to it for the first time, creating your own user, as well as disabling your insecure root user. [NB: Stay tuned for follow ups about installing gems, deploying with Capistrano, generating SSH keys on github, installing Passenger, and installing and configuring nginx].</p>

<p>  <strong>So what is a web server? A web server </strong> is a combination of both hardware and software that acts as a host to content, and delivers that content in the form of HTML through HTTP to the client, which in most cases is the browser.</p>

<h3> Creating your Server </h3>


<p>  <p>We used <a href="www.dediserve.com" alt="Dediserve's Website"> Dediserve.com </a> as our cloud provider. They offer extensive Linux based distributions. In specific, we used Linxu&#8217;s Ubuntu distribution, which is one of the most popular in use today. </p></p>

<p>  <p>Once you create an account on Dediserve.com, you&#8217;ll want to select &#8220;Cloud Nodes&#8221; in the Client Area. </p></p>

<p>  <p> Once there, you&#8217;ll be prompted to select a server hostname, a password for your server, what OS templace you would like (in this case, we used Ubuntu 12.04 x64), as well as bandwidth, disk space, memory, and CPU cores.</p></p>

<p>  <p>Once finished, Dediserve will automate an IP address for you. </p></p>

<p>  <img src="http://vicfriedman.github.com/images/Dediserve.png"></p>

<p>  <p><strong> An IP address is a unique set of numbers </strong> that represents a location for your server in the cloud. Every server has an IP address and every computer has an IP address. The IP addresses are what the server and computers use to find each other and communicate back and forth. </p></p>

<p>  <p> Dediserve will automatically generate your selected password as the password for the root user (or default administrator) for your server. This user has no restrictions in terms of access. Because of this, it&#8217;s considered bad practice to use this as your regular log-on. In terms of security of your server, this user is considerd insecure because it provides the easiest path for someone to hack on to your server. (Keep reading to learn how to disable the root user). </p></p>

<h3> Connecting to Your Server </h3>


<p>  </p>The next step is to create a connection to your server, using SSH. SSH stands for Secure SHell and is a way to conenct remotely to your server via commandline: </p></p>

<pre><code>`ssh root@XXX.XXX.XXX.XXX`
</code></pre>

<p> replace the XXX.XXX.XXX.XXX with your server&#8217;s IP address.</p>

<p>You should get a prompt delcaring that the &#8216;authenticity of host can&#8217;t be established&#8217;. Type <code>yes</code> and you will be prompted for password for your server. Once you submit the password, you&#8217;re connected!!</p>

<h3> Creating Your Own User </h3>


<p>The next step is to create your own user admin, which will override the root user. To do so, you will use the <code>useradd</code> command.
<code>useradd --help</code> will bring up a list of options, including <code>s &lt;shell&gt;</code>, <code>-G &lt;groups&gt;</code>, and  <code>m</code>. The <code>--help</code> argument provides a list of argument options, as well as instructions for how to use them.</p>

<p>We will want to run <code>useradd -s /bin/bash -G sudo -m USERNAME</code>. This command adds a user to your server, selects Bash as your commandline interface, adds <code>sudo</code> (or Super User Do) to your group giving your new admin full access, and then finally your new username is added to the home directory.</p>

<p>You&#8217;ll want to make sure and replace <code>USERNAME</code> with the username that you would like to use.
Then you&#8217;ll need to create a password for your user by entering <code>passwd USERNAME</code>.</p>

<p><code>exit</code> will allow you to disconnect from your server. Then, relog in with you IP address, but this time prefixing it with your new username.</p>

<pre><code>ssh USERNAME@XXX.XXX.XXX.XXX
</code></pre>

<h3> Disconnecting/Disabling Root User Login </h3>


<p>Now, you&#8217;ll need to disconnect your root user&#8217;s ability to SSH into your server. The first step in this process is to edit your <code>ssh_config</code> file.</p>

<p>You&#8217;ll open this file by entering:</p>

<pre><code>sudo vim /etc/ssh/sshd_config
</code></pre>

<p><code>sudo</code> calls the super-powers to override security, <code>vim</code> is a text editor that runs within commmandline, and <code>etc/ssh/sshd_config</code> is the path to the configuration file.</p>

<p>Once the file is open, you&#8217;ll need to locate the line,
  <code>PermitRootLogin yes</code></p>

<p>and change it to read
  <code>PermitRootLogin no</code></p>

<p>To save and quit the file enter <code>:wq</code>. This will both write to the file (and save it) as well as quit vim.</p>

<p>The final step to disable the root user is to restart the <code>sshd</code> process</p>

<p>  <code>sudo /etc/init.d/ssh restart</code></p>

<p>Now if you try to login as <code>root</code>, you will be denied access to the server. You should get an incorrect password error. This will delay anyone trying to hack onto your server by simply wasting their time.</p>

<p>Stay tune for Part Two, deploying to your server!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Each Method]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/02/15/the-each-method/"/>
    <updated>2013-02-15T07:40:00-05:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/02/15/the-each-method</id>
    <content type="html"><![CDATA[<p><strong>Today marks day 9 into my 60 day course</strong> at <a href="flatironschool.com"> the Flatiron School. </a> Essentially, I&#8217;m 15% done. I would best summarize the last 9 days with these simple words: anxiety, frustration, and (sometimes) victory.<p>

<p><strong>The thing about this course,</strong> essentially a &#8220;full-immersion language course&#8221;, is the pace in which things are taught. It&#8217;s fast. I was prepared for fast, but not this fast. We&#8217;ve been told from day one, &#8220;If you don&#8217;t understand something now, don&#8217;t worry. You will use these methods for the rest of your life, and at some point, they will make sense.&#8221; I&#8217;m not used to moving on to new material before I grasp the current material, but we&#8217;ve also been told to trust the structure of the program, so I have.</p>

<p><strong>So each day has been filled with new material,</strong> and thus new frustrations. A day hasn&#8217;t gone by where I&#8217;ve been utterly and completely lost. I don&#8217;t want to define myself as the potential crier for the class, but&#8230;.I could be.</p>

<p><strong>Yesterday, after spending close to three hours on homework,</strong> I called it a night. And then something happened, a moment of realization. I UNDERSTAND ITERATIONS. Two days prior, literally a mere 48 hours, iterations were some mystical thing that I was struggling to grasp. And without even realizing it, I had been using the each method with ease in my programs. AND I DIDN&#8217;T EVEN REALIZE THAT I UNDERSTOOD THEM. The pace of the class kept me from noticing when material had sunk in.</p>

<p><strong>And with that introduction, I give you the each method.</strong></p>

<p>Say you have an array of candy:</p>

<img src ="http://vicfriedman.github.com/images/post_images/array.png" alt ="Image of and array containing reeces, twizzlers, mambas and snickers">


<p>The each method iterates, or loops, through each item in an array. In layman&#8217;s terms, the method acts as a pointer and moves through the array, first to &#8220;reeces&#8221;, then to &#8220;twizzlers&#8221;, then &#8220;mambas&#8221;, and finally to &#8220;snickers&#8221;. Objects that can be iterated through are called enumerables. In Ruby, strings, hashes, and arrays are all enumerators.</p>

Once the array has been defined, we can implement the each method on that array.
The each method only returns the original array, meaning all it does is move through each index. Nothing is actually done to or with the data, and no new array is created.

<img src ="http://vicfriedman.github.com/images/post_images/array_each_do.png" alt ="Image of and array containing reeces, twizzlers, mambas and snickers">


<p>However, you can do things like this: </p>

<img src ="http://vicfriedman.github.com/images/post_images/array_puts.png" alt ="Image of and array containing reeces, twizzlers, mambas and snickers">


<p>Here I added a puts in my block of code. The |candy| refers to each type of candy included my array. In my string, I refer back to each individual instance of candy, which then includes it in the string.
But take note of the actual return value from Ruby, it is still the original array. Again, the each method does not do anything to the original array, it simply takes stock of each item in the array as it passes through and implements the code included in the block (which here is to puts my string).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Things]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/02/11/5-things-learned-while-learning/"/>
    <updated>2013-02-11T19:51:00-05:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/02/11/5-things-learned-while-learning</id>
    <content type="html"><![CDATA[<h1>5 Things I&#8217;ve Learned About Myself While Learning to Code:</h1>


<ul style="list-style:none">
<p><li><strong>1. I need physical activity in order to well sleep at night.</strong> This statement rang true even when I was doing the prework for the <a href="http://flatironschool.com">Flatiron School</a>. I&#8217;m an active girl, and now I&#8217;m sitting for 10-12 hours a day. I had no idea the effect this sudden change would have on me. And oh the sleepless nights. Even when all my work is said and done, I can&#8217;t seem to go to bed before 2am. The moral of the story is that I need to be more diligent about the gym. And here&#8217;s the catch-22: I would rather spend my time hacking and reading about hacking than anything else. <li></p>


<p><li><strong>2. I am prideful.</strong> Sure everyone has pride, but I did not realize to what extent I exalted my own mental capacity, until eight days ago. My class is smart. So imagine a class of dedicated brainiacs. Imagine sitting in that room during lecture feeling so horribly lost. Do you really want to be the girl to raise your hand and say &#8220;I have no idea what&#8217;s going on. Can you please re-explain?&#8221; It&#8217;s a terrifying concept. It&#8217;s admitting defeat. The feeling exactly mirrors that of saying &#8220;I am dumb.&#8221; That&#8217;s pride rising to the surface. And it&#8217;s something I&#8217;ve had to work on getting over, because otherwise I&#8217;ll never learn.</li></p>


<p><li><strong>3. The highs beat all the lows.</strong> I spend most of my day with error messages, and that&#8217;s not an exageration. I am a Ruby Newbie, and proud of it. Those error messages, paired with overwhelming feelings of frustration and discouragement, and an ever present desire to bang my head into a wall makes my victories that much sweeter. And yes, I wrote my first Ruby program today. It took four people over an hour, but you can bet that I&#8217;m calling my mom as soon as I get home to brag.</li></p>


<p><li><strong>4. It&#8217;s hard to take the training wheels off and just ride.</strong> I have two incredible teachers who are great resources for all my coding questions. And my computer is this expensive machine, that some part of me is still afraid to break with one single rm -rf (and I didn&#8217;t even know I could do that until one month ago). So I&#8217;ve hesitated in trying things on my own. &#8220;What if I ruin all of it? What if my computer just bursts into a million pieces?&#8221; The list of irrational fears goes on. And here&#8217;s the thing, I&#8217;ve already made a huge jump in being at the Flatiron School in the first place. I threw my training wheels to the curb the second I signed myself up for these 12 intense weeks. So why stop now? Yes it&#8217;s hard. Yes, it&#8217;s scary. But won&#8217;t I be that much of a better person by the end of all of this by claiming it as my own? The Flatiron School celebrates failure, and so do I.</li></p>


<p><li><strong>5. Time flies when you&#8217;re having fun.</strong> This past Friday, we were given one hour to work on an assignment between blocks of lectures. And literally before I knew it, we were called back to lecture. I had barely even looked up from my computer. I hadn&#8217;t registered a single thing from the outside world, other than the six words I had composed that were hopefully going to turn into a successful method. It didn&#8217;t. I actually got the entire problem wrong, but that&#8217;s ok. Because the thing I took from that hour is that in 5 days of class, coding has become a part of me. I have never been able to do anything with such uninterrupted vigor ever. And this is just the beginning.</li></p>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, world!]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/02/05/hello-world/"/>
    <updated>2013-02-05T17:29:00-05:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/02/05/hello-world</id>
    <content type="html"><![CDATA[<p>Are you there God? It&#8217;s me, Margaret.</p>
]]></content>
  </entry>
  
</feed>
