<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Too Busy Coding...]]></title>
  <link href="http://vicfriedman.github.com/atom.xml" rel="self"/>
  <link href="http://vicfriedman.github.com/"/>
  <updated>2014-09-17T15:35:14-04:00</updated>
  <id>http://vicfriedman.github.com/</id>
  <author>
    <name><![CDATA[Victoria Friedman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Teaching CLI]]></title>
    <link href="http://vicfriedman.github.com/blog/2014/09/16/teaching-cli/"/>
    <updated>2014-09-16T11:04:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2014/09/16/teaching-cli</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>The Nuts and Bolts:</em></strong>
<strong>About six months ago</strong> I joined <a href="https://flatironschool.com">Flatiron School</a> to start something really awesome&#8230;a program to teach high school students to code. After teaching over 100 students this summer during six two-week camps and the preparations for our <a href="https://after.flatironschool.com/">after school programs</a> I&#8217;ve learned a lot about teaching and coding.</p>

<p><strong><em>##CLI:</em></strong></p>

<p>When I learned command line, it felt like a necessary evil. This thing I had to learn in order to get to the cool stuff. I wanted to build web apps that people would use and think were awesome. But before that, I had to learn CLI and git and sql and all this <em>stuff</em>. That&#8217;s like 3 languages before you even get to the good stuff.</p>

<p>At Flatiron School, we don&#8217;t teach coding in contrived environments. Not for our adult immersives, and definitely not for our high school programs. We want give our students the ability to use real tools to build real things. Which means, again&#8230;teaching our students to use terminal like the pros. But it sort of seems to suck.</p>

<p><strong><em>###How It&#8217;s Taught Now</em></strong></p>

<p>The best guide available online is Zed Shaw&#8217;s <a href="http://cli.learncodethehardway.org/book/">Learn CLI the Hard Way</a>.It&#8217;s actually a great tutorial to master the commands. It&#8217;s how I learned. But let&#8217;s think about it for a second. A class of 20 fifteen-year-olds will eat you alive if you hand them that and say &#8220;type &#8216;mkdir director_name&#8217; 10 times, followed by &#8216;rm -r directory_name&#8217;&#8221;. Especially on day one!</p>

<p>Our students have never coded before. Never even knew that terminal existed on their computer. Didn&#8217;t know that that was life before the GUI. Didn&#8217;t even know what a GUI was. So you can&#8217;t just give them meaningless exercises to learn this potentially really boring thing.</p>

<p>The single most frequently asked question in every class by most every student is &#8220;Why are we learning this? What&#8217;s the point?&#8221;</p>

<p><strong><em>###What Is The Point?!</em></strong></p>

<p>Command Line provides an incredibly easy interface to your computer. You don&#8217;t spend seconds looking for your lost mouse, clicking icons, waiting for finder to load, waiting for files to load. Typing <code>open Desktop/Development/my_file.rb</code> takes milliseconds! As a developer, your time is expensive, and those seconds you waste navigating through finder add up to minutes and then hours that you waste trying to find and open files. That&#8217;s why we claim the best developers never have to touch a mouse.</p>

<p><strong><em>###So How Do You Make It Interesting??</em></strong></p>

<p>First and foremost, terminal can&#8217;t be treated as the boring thing. It has to be cool in and of itself.</p>

<p>Here are some points I&#8217;ve tried to emphasize:</p>

<p><strong>1.</strong> IT&#8217;S NOT SCARY!! You cannot explode your computer into a million pieces just by typing in a bad command. Just bang on the keyboard and press enter. It&#8217;ll be ok I promise.</p>

<p><strong>2.</strong> A themed story makes a world of difference. I&#8217;ve used the story of saving a princess from a tower. You have to move through the territory ruled by the castle by creating the directories that make up the different areas of the territory as well as create files for the different people and creatures you meet along the way. This story allows students to repeat the commands over and over and over again, but not bore them to death with random pointless files. This way, they&#8217;re on a mission.</p>

<p><strong>3.</strong> <code>Say</code> command packs a big punch. You can even have the <code>say</code> command read from a file <code>say -f file_name</code>. You can change voices by passing the <code>-v</code> flag with an argument. It would look something like this <code>say -f file-name -v voice_name</code>. Apple provides Bruce, Kathy, Alex, Fred, Victoria, and Vicki as potential different voices.</p>

<p><strong>4.</strong> <code>rm -rf</code> is THE MOST DANGEROUS. But it also make you feel super powerful that you can destroy a computer with four letters and a hyphen.</p>

<p><strong>5.</strong>* ALL THE TOYS. Just try typing <code>brew install cmatrix</code>. Once it installs enter <code>cmatrix</code> and install feel like the coolest.</p>

<p><strong><em>Aside</em></strong> You can even incorporate the <code>say</code> command into ruby code. Which is SUPER AWESOME.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">say_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="sb">`say &quot;hi </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Confidence in the Face of Something New]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/11/16/keeping-confidence-in-the-face-of-something-new/"/>
    <updated>2013-11-16T00:16:00-05:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/11/16/keeping-confidence-in-the-face-of-something-new</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>Disclaimer:</em></strong> I originally wrote this post to give as a lightning talk at RubyConf 2013. I signed up a little too late and there wasn&#8217;t time for me to give it, so I figured it would make a good blog post.</p>

<p><img src="http://community.ubnt.com/ubnt/attachments/ubnt/Lounge/24685/1/bth_bangHeadAgainstWall.gif"/></p>

<p><strong>Hi my name is Victoria Friedman,</strong> and I am a very new member of the Ruby community. I&#8217;ve been programming for less than a year. Seriously, last January I made my brother spend a good 30 minutes explaining absolute versus relative paths to me. So how did I end up here?</p>

<p><strong>I didn&#8217;t come to Ruby from a CS background,</strong> I didn&#8217;t grow up taking apart the toaster oven like my older brother, instead I wrote poems and drew pictures that my mom turned into postcards. I was an English major at a liberal arts college in TN and wanted to be a writer. So programming?</p>

<p><strong>Last February I started a 12 week intensive course in ruby and rails</strong> in New York City called the Flatiron School. And now I&#8217;m a rails developer at Time.</p>

<p><strong>For those of you that knew from an early age that programming was for you,</strong> I applaud you. You&#8217;re so lucky you found your path in life early on. I on the other hand, hit my post-grad quarter life crisis SO hard. Seriously there wasn&#8217;t something I didn&#8217;t try: coaching, writing, fashion, pastry school. Been there, done that. So I came from the most non-traditional background. And the programming way of thinking was not my specialty.</p>

<p><strong>People tend to stick to things they&#8217;re inheritely good at.</strong> I hate things I&#8217;m bad at, which is why I don&#8217;t attempt to paint portraits, or write short fiction stories, or play tennis. I&#8217;m bad at it. I&#8217;m sure I could learn, but what&#8217;s the fun in sucking so badly at something? It&#8217;s demoralizing. The biggest shot to the ego. Especially when you&#8217;re starting &#8220;late in life&#8221;</p>

<p><strong>That fact alone should have made me run in the opposite direction.</strong> I called directories folders, I&#8217;d never heard of a method, and I can&#8217;t believe I&#8217;m about to admit this, but less than a year ago I thought Java was short for Javascript. I was that clueless.</p>

<p><strong>Progamming is HARD. it is the hardest thing I have ever tried to do in my entire life.</strong> Steve Klabnik came and talked to my class at the Flatiron School and I think he described it in the best way I&#8217;ve ever heard &#8220;when you&#8217;re writing code, you&#8217;re fixing things that are broken, when it&#8217;s fixed, you stop. So programming is just like banging your head against a wall, it feels really good when you stop&#8221;</p>

<p><strong>Along with learning to code, and acquiring a job,</strong> The Flatiron School really taught me how to check my ego. And really for the benefit of myself.</p>

<p><strong>The advice I tell anyone learning to code,</strong> especially people going through programs like mine, is to not be afraid to admit when you don&#8217;t know something. Bloomberg will halt a meeting and ask what a word means if someone uses a word he doesn&#8217;t know. I am not nearly as influential as Bloomberg. So why should I be afraid to admit that I hadn&#8217;t seen a lot (if not most) of the metaprogramming examples Steve Harms used in his talk earlier today, and that I had to google what TTL meant yesterday. If you don&#8217;t ask, you&#8217;ll never know. You will never learn it unless you can admit you don&#8217;t know it.</p>

<p><strong>When you learn to code, you spend a lot of time in &#8220;the fog&#8221;,</strong> to quote my teacher from Flatiron, but the more you use something, the more you understand it. I didn&#8217;t think I understood iteration until I realized I was using the each method correctly. I came out of the fog. Over the last 9 months in my learning to code adventures, I&#8217;ve continued to dip into the fog, and then come back out. But what makes it so great is when the lights come on, and the best part about it is you can actually demostrate it. You can build something that didn&#8217;t previously exist.</p>

<p><strong>Last week, I started trying to fix a bug at work&#8230;</strong>and then this week, I was still trying to fix the same bug. I spent FIVE DAYS on the same bug. And then I met a friend after work, and he was able to help me fix it in 25 minutes. So why didn&#8217;t that make me want to cry?  because I&#8217;ve been doing this for nine months, and he&#8217;s been coding in ruby for 4 years and that doesn&#8217;t make him smarter than me, or better than me, or cooler than me. Also he couldn&#8217;t fully explain why what we did fixed the bug. But I met someone here at Rubyconf who could. And now I can go back to the city and explain to my friend.</p>

<p><strong>And that&#8217;s the beauty of the tech industry.</strong> No one can ever know everything there is to know about everything. Somewhere, there is someone that knows more about something than you do, or can do it better. And isn&#8217;t that the entire point of open source projects in the first place? And blogs and helping each other.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Difference between url_for and polymorphic_url]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/11/14/the-difference-between-url-for-and-polymorphic-url/"/>
    <updated>2013-11-14T09:03:00-05:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/11/14/the-difference-between-url-for-and-polymorphic-url</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><code>url_for</code> is a great Rails helper that returns a URL</strong> that has been rewritten according to the options hash passed to it and defined routes. Rails passes all the keys in the options hash to the routing module. There are a few exceptions, including (but not limited to) <code>:only_path</code>, <code>:trailing_slash</code>, and <code>:host</code>. For a full list please see the docs <a href="http://apidock.com/rails/ActionController/Base/url_for">here</a>. <br><br></p>

<pre><code>        &lt;%= url_for :controller =&gt; "recipes", :action =&gt; "show", :id =&gt; 1 %&gt;
</code></pre>

<p>This would generate a url that looks like this:&#8217;http://domain.com/recipes/show/10&#8217;<br><br></p>

<p><strong>But let&#8217;s say you were trying to generate a URL</strong> for a polymorphic object, or a nested object, or you just want the absolute path. Let&#8217;s take an image object. My image class is polymorphic, and thus belongs to every model as imageable.<br><br></p>

<pre><code>        &lt;%= url_for @image :only_path =&gt; false %&gt;
</code></pre>

<p><strong>Setting <code>:only_path</code> to false generates the full url instead</strong> of just the relative path. <code>url_for</code> is really like <code>path_for</code>. You have to pass it an additional argument to return the full URL. But that example returns an error: Wrong number of arguments(2 for 1). Essentially in the example above, you&#8217;re passing two arguments&#8211; an object and a hash. <br><br></p>

<p>But, if you only pass one argument, the object…<br><br></p>

<pre><code>            &lt;%=url_for @image %&gt;
</code></pre>

<p><strong>This produces a relative path to the image.</strong> When you pass an ActiveRecord object to url_for, it causes a lookup on the image class, essentially calling @image.to_params, and use image_path to generate the path.<br><br></p>

<p><strong>So how then do you get the full URL</strong> with the domain name without doing some hackey <code>"http://mydomain.com" + &lt; my_query_string_generated_from_url_for &gt;</code> ?<br><br></p>

<p><strong>This is where <code>polymorphic_url</code> comes in.</strong> <code>polymorphic_url</code> is a Rails helper method for calling a named route. It also provides support for nested resources. This helper method is designed to return a full URL, instead of just the relative path, without passing any arguments. If you did want the relative path, <code>polymorphic_path</code> does just that.<br><br></p>

<p>So let&#8217;s say we&#8217;re on an image record<br><br></p>

<pre><code>        &lt;%= polymorphic_url(@image) %&gt;
</code></pre>

<p>That would be the same as calling <code>image_url(@image)</code>. Rails would return &#8220;http://mydomain.com/images/1&#8221;<br><br></p>

<p><strong>So now say you want to access the images from the recipes.</strong> This is where the nested support of polymorphic_url comes into play.<br><br></p>

<pre><code>        &lt;%= polymorphic_url([recipe, image])%&gt;
</code></pre>

<p>This would return &#8220;http://mydomain.com/recipes/1/images/1&#8221;<br><br></p>

<p>So when do you use these handy helpers?A path should always be used unless you&#8217;re doing a full redirect.<br><br></p>

<p><strong>Additional Resources</strong> <br>
1. <a href="http://apidock.com/rails/ActionController/Base/url_for">The Docs for url_for</a>.<br>
2.  <a href="http://apidock.com/rails/ActionController/PolymorphicRoutes/polymorphic_url">The Docs for polymorphic_url</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Difference Between url_for and polymorphic_url]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/11/13/the-difference-between-url-for-and-polymorphic-url/"/>
    <updated>2013-11-13T20:02:00-05:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/11/13/the-difference-between-url-for-and-polymorphic-url</id>
    <content type="html"><![CDATA[<p><strong><code>url_for</code> is a great Rails helper that returns a URL</strong> that has been rewritten according to the options hash passed to it and defined routes. Rails passes all the keys in the options hash to the routing module. There are a few exceptions, including (but not limited to) <code>:only_path</code>, <code>:trailing_slash</code>, and <code>:host</code>. For a full list please see the docs <a href="http://apidock.com/rails/ActionController/Base/url_for">here</a>.       &lt;%= url_for :controller => &#8220;recipes&#8221;, :action => &#8220;show&#8221;, :id => 1 %><strong>This would generate a url</strong> that looks like this: &#8216;http://domain.com/recipes/show/10&#8217;<strong>But let&#8217;s say you were trying to generate a URL for a polymorphic object,</strong> or a nested object, or you just want the absolute path. Let&#8217;s take an image object. My image class is polymorphic, and thus belongs to every model as imageable.      &lt;%= url_for @image :only_path => false %><strong>Setting <code>:only_path</code> to false generates the full url instead of just the relative path.</strong> <code>url_for</code> is really like <code>path_for</code>. You have to pass it an additional argument to return the full URL. But that example returns an error: Wrong number of arguments(2 for 1). Essentially in the example above, you&#8217;re passing two arguments&#8211; an object and a hash. <strong>But, if you only pass one argument, the object…</strong>      &lt;%=url_for @image %><strong>This produces a relative path to the image.</strong> When you pass an ActiveRecord object to url_for, it causes a lookup on the image class, essentially calling @image.to_params, and use image_path to generate the path.<strong>So how then do you get the full URL with the domain name without</strong> doing some hackey <code>"http://mydomain.com" + &lt;my_query_string_generated_from_url_for&gt;</code> ?<strong>This is where <code>polymorphic_url</code> comes in.</strong> <code>polymorphic_url</code> is a Rails helper method for calling a named route. It also provides support for nested resources. This helper method is designed to return a full URL, instead of just the relative path, without passing any arguments. If you did want the relative path, <code>polymorphic_path</code> does just that.<strong>So let&#8217;s say we&#8217;re on an image record</strong>      &lt;%= polymorphic_url(@image) %><strong>That would be the same as calling image_url(@image).</strong> Rails would return &#8220;http://mydomain.com/images/1&#8221;<strong>So now say you want to access the images from the recipes.</strong> This is where the nested support of polymorphic_url comes into play.      &lt;%= polymorphic_url([recipe, image])%>This would return &#8220;http://mydomain.com/recipes/1/images/1&#8221;<strong>So when do you use these handy helpers?</strong> A path should always be used unless you&#8217;re doing a full redirect.</p>

<p>Additional Resources <br>
1. <a href="http://apidock.com/rails/ActionController/Base/url_for">The Docs for url_for</a>.
2.  <a href="http://apidock.com/rails/ActionController/PolymorphicRoutes/polymorphic_url">The Docs for polymorphic_url</a>
3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Bootcamps Are NOT a Scam. A Hacker's Perspective]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/10/18/dev-bootcamps-are-not-a-scam-a-hackers-perspective/"/>
    <updated>2013-10-18T12:20:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/10/18/dev-bootcamps-are-not-a-scam-a-hackers-perspective</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>This is my response to <a href=http://www.techendo.co/posts/are-dev-bootcamps-a-scam-a-hacker-s-perspective>this</a> horrible article arguing against the validity of hacker schools.</em></strong> And I am a huge supporter, because without the Flatiron School, I literally couldn&#8217;t even tell you what I&#8217;d be doing with my life. I wrote a really long response to his article in the comments on that post, and it got removed somehow&#8230;so I decided to re-write it and put it on my blog. So here goes&#8230;</p>

<p><strong>My name is Victoria Friedman and I am</strong> a graduate of the second semester of students from the Flatiron School. Prior to my semester I had absolutely ZERO technical background. I graduated from a liberal arts college and was an English Literature major and a French Literature minor. I love to read and write and play sports and do other creative work (like bake and do crafts projects). I wanted to work in the world of publishing, but editorial work is nearly impossible to get involved with. So I spent two months learning some basic HTML and CSS so that I could apply to online magazines and do more than be able to just write content. And that&#8217;s when I learned about the Flatiron School. I had never been in terminal until this past January. I didn&#8217;t know my elbow from my foot, my left from right. Java? That&#8217;s short for Javascript right? Seriously. That&#8217;s what I thought.</p>

<p><strong>I pretty much dropped everything</strong> the two weeks leading up to the start of the semester and spent around 10 hours a day at school doing the prework, all with the support of Avi and the graduates from the first class. And then the semester started. I should also point out that I was given a scholarship to attend the Flatiron School. I paid NOTHING for three months of learning. which I believe goes against your point of 90k tuitions. Also the Flatiron School&#8217;s tuition is nowhere near there to begin with.</p>

<p><strong>And then the semester started.</strong> I kissed my social life goodbye and buckled down. I struggled immensely with some basic programming concepts. You can read my blog post about understanding iterations and the each method <a href="http://bit.ly/1aVW6M0">here</a> and all my other blog posts that document my learning during the Flatiron School since I&#8217;ve graduated. Two of which have been included in issues of Ruby Weekly.</p>

<p><strong>As far as only having the ability to produce shitty web apps</strong> at the end, I built <a href="http://strboard.com/login"> Starboard</a> with three other students in three weeks. And none of us knew Rails prior. Also, here are some other amazing projects that have come out of the school. Actually, just check out <a href="http://built.flatironschool.com/">Built</a> which is a CMS for all Flatiron student projects THAT WAS ALSO BUILT BY FLATIRON STUDENTS.</p>

<p><strong>At the end of my interview process,</strong> I had more than one job offer. I spent six weeks interviewing and was faced with up to four rounds of interviews with companies, all of which involved technical questions. I was asked to explain the internet, write the reverse method for a string without using .reverse on a whiteboard, construct a multiplayer chess game with thousands of users and describe the caching involved, what a Ruby singleton was, and how inheritance works in javascript. If those are bullshit interview questions, please give me examples of real ones. And I&#8217;m really not sure you can fake answering those questions. I just don&#8217;t think it&#8217;s possible.</p>

<p><strong>I am now a developer at Time Inc</strong> on their Internet Application Development Team. If you want to see some of my work since I&#8217;ve graduated, please go buy an ecbookbook on <a href=myrecipes.com>Myrecipes.com</a>. I built that. I don&#8217;t think you can call the 806th most popular website in the world a shitty web app, and my bosses seem to think I&#8217;m qualified enough to lead development for the site. I single handedly run our rails production deployments, manage project timelines and workflow, attend meetings with the sites stakeholders, all while working in collaboration with a team of 20+ people.
<strong>Yes I make mistakes.</strong> But I also learn from them and never make the same mistake twice. Yes things are hard for me sometimes. But I also know I have an abundance of resources (both inside and outside my company) and a brain to figure it all out. Please show me a programmer who knows everything about every programming language. You can&#8217;t. It&#8217;s impossible. That&#8217;s the beauty of the tech industry, there is always something new to learn.</p>

<p><strong>I&#8217;ve always told people</strong> that my biggest takeaway from my time at the Flatiron School was the ability to learn the things I don&#8217;t know. Because no one will ever know it all.</p>

<p><strong>So please do let me know if you would like to speak with any of my bosses. I can easily put you in touch.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[accepts_nested_attributes_for with name field in HTML]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/10/09/accepted-nested-attributes-for-with-name-field-in-html/"/>
    <updated>2013-10-09T20:34:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/10/09/accepted-nested-attributes-for-with-name-field-in-html</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p>My project at work is interesting because all the teams are very modularized. Yes, we all attend the same standup and have a general idea of what each individual is working on, but that being said the only time I&#8217;m really affected by what our front-end team does is when I have to include new markup on the rails side. I never even see the global.js or global.css files.</p>

<p>This week, I spent a lot of time working with one of our front-end developers. We split the work based on our specific abilities in an attempt to finish this sprint as quickly as possible. So this means she&#8217;s controling the front end of one of our rails forms. I don&#8217;t even have the html for the form in my code base.</p>

<p>So this means in order to make this a form and have the user&#8217;s input save to our database as objects, I had to coordinate the implementation of logic, including knowing what to pass in to the name field of the html for the part of the form the front-end developer controls.</p>

<p>I have three classes:</p>

<pre><code>  class Gift
    has_many :gift_recipients
    has_many :recipients, :through =&gt; :gift_recipients

    accepts_nested_attributes_for :recipients
  end

  class Recipient
    has_many :gift_recipients
    belongs_to :gifts, :through =&gt; :gift_recipients
  end

  class Gift_Recipient
    belongs_to :gifts
    belongs_to :recipients
  end
</code></pre>

<p>My form in my views is used to be create a gift, and part of that form is also creating recipients for that gift. Essentially, a user checks a box and mini form appends to the page by javascript, allowing them to enter in a recipient&#8217;s email and a message.</p>

<p><code>accepts_nested_attributes_for</code> allows the creation of a related object along with the main object. So in my example, I&#8217;m creating an instance of my <code>Gift</code> class while simultaneously creating an instance of my <code>Recipient</code> class. There is good documentation on this <a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for">here</a>.</p>

<p>So now what? I don&#8217;t have the html for the recipients section of the form in my code, so I have to use the HMTL <code>name</code> field to pass the user&#8217;s input back to rails to save it in the database. I was familiar how to do this with just an attribute of an object. For an attribute of the gift, it would look like this:</p>

<pre><code>  &lt;input type="text" name="gift[name]" &gt;
</code></pre>

<p>But how does that change with <code>accepts_nested_attributes_for</code> ?</p>

<pre><code>It's actually fairly simple:

&lt;input type="text" name="gift[recipients_attributes][0][email]"&gt;
&lt;input type="text" name="gift[recipients_attributes][0][message]"&gt;
</code></pre>

<p>This would be the input field for an email address for the first instance of <code>Recipient</code>. It follows the typical Rails convention of keeping the associated table name pluralized. The only thing to be aware of, is that the indexing changes based on how many instances of recipients you are creating.</p>

<p>So say my user pushes the button again and wants to create two recipients? The HTML would look a little something like this:</p>

<pre><code>  &lt;input type="text" name="gift[recipients_attributes][1][email]"&gt;
  &lt;input type="text" name="gift[recipients_attributes][1][message]"&gt;
</code></pre>

<p>And voila, on submit, rails understands to create one instance of a gift, as well as two instances of recipients. The through relationship is what attaches my recipients to the gift, so there is naturally an association with that gift to those users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The difference between Javascript Primitive Data Types and Objects]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/09/15/the-difference-between-javascript-primitive-data-types-and-objects/"/>
    <updated>2013-09-15T12:59:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/09/15/the-difference-between-javascript-primitive-data-types-and-objects</id>
    <content type="html"><![CDATA[<p><strong><em>I&#8217;ve recently been reading Object Oriented Javascript per a colleague&#8217;s reccomendation.</em></strong> One thing I got very stuck on, especially coming from Ruby, has been the difference between primitive data types and objects. In Ruby, everything is an object so the concept of primitive data types confused me entirely. Especially this:</p>

<pre><code>  var word = "hello"
  typeof word =&gt; "string"

  var word = new String("hello")
  typeof word =&gt; "object"
</code></pre>

<p><strong><a href ="https://www.destroyallsoftware.com/talks/wat"> WAT.</a></strong> Literally that&#8217;s what I thought. Until I dug a little deeper.</p>

<p>Javascript has five primitive data types:<br>
1. Number<br>
2. String<br>
3. Boolean<br>
4. Undefined<br>
5. Null<br></p>

<p><strong>Anything that doesn&#8217;t belong to any of these five primitive types is considered an object.</strong></p>

<p><strong>BUT each of these five primitive data types has a corresponding object constructor.</strong> So to take my above example, you can create a string in two different ways.</p>

<p><strong>First as a primitive data type:</strong></p>

<pre><code>  var word = "hello";
</code></pre>

<p><strong>And then as an object:</strong></p>

<pre><code>  var word = new String("hello");
</code></pre>

<p><strong>The constructor function uses the <code>new</code> operator.</strong> A string object is very similar to a hash of characters.</p>

<pre><code>word;
=&gt; String {0: "h", 1: "e", 2: "l", 3: "l", 4: "o", formatUnicorn: function, truncate: function, splitOnLast: function, contains: function}
</code></pre>

<p>The word variable returns a has with each letter index.</p>

<p><strong>And each new object has methods associated with them based on what constructor was used.</strong> To continue with the string I created, there are plenty of methods available for string manipulation. (I&#8217;ve been told it&#8217;s best practice to use primitive data types for strings if you don&#8217;t plan on using a lot of the methods.)</p>

<pre><code>word.length; =&gt; 5
word[0]; =&gt; "h"
word.split(""); =&gt; ["h", "e", "l", "l", "o"]
word.toUpperCase(); =&gt; "HELLO"
</code></pre>

<p>One cool thing, Javascript gives you the ability to treat primitive data types as object. Let&#8217;s take a primitive string:</p>

<pre><code>  var greeting = "hello";
  greeting.size; =&gt; 5
</code></pre>

<p>In this case, behind the scenes, Javascript turns my primitive data type into an object, runs the <code>size</code> method, and then transforms it back to the primitive data type.</p>

<p>You can even check the different between the two:</p>

<pre><code>  var greeting = "hello";
  var word = new String("hello");
  word == greeting; =&gt; false
</code></pre>

<p>Conceptually, these are two totally different things. They&#8217;re not the same type, as per my original confusion one is a string and one is an object. Objects can have additional properties, so those two variables shouldn&#8217;t be equal because they&#8217;re not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allowing The Javascript onbeforeunload Function To Submit A Form]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/08/30/allowing-the-javascript-onbeforeunload-to-submit-a-form/"/>
    <updated>2013-08-30T16:53:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/08/30/allowing-the-javascript-onbeforeunload-to-submit-a-form</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>So my last few weeks have been pretty Javascript heavy.</em></strong> I came across a situation where I needed to use the <code>onbeforeunload</code> method so that a popup would occur when a user tried to navigate away from an edit page. This method works on a global scope and is fired before the window is unloaded, or closed.  My popup was intended to remind a user to save their changes before leaving.</p>

<p><strong>The only issue with that is that the default functionality of this method</strong> ensures that a popup appears when a user tries to leave the page, even on a form submission. So clearly you need to be able to work around this. I don&#8217;t want a popup to appear reminding my user to save their changes when they clicked the save button.</p>

<p><strong>So the first step is to define the the function, and it&#8217;s return value.</strong></p>

<pre><code>        window.onbeforeunload = function(e) { 
            return "You have unsaved changes, please save them."
        };
</code></pre>

<p>The popup generated will look like this:<br>
<img src="http://vicfriedman.github.com/images/post_images/popup.png"></p>

<p>The only thing about this popup that can be customized is the message, which is defined in the return value of the function. The rest of it is a generic browswer popup. The same popup in Safari will look like this:<br></p>

<p><img src="http://vicfriedman.github.com/images/post_images/safari-popup.png"></p>

<p><strong>Now, any link I click will cause this popup to appear.</strong> At this point, even submitting the form will induce this popup. Obviously not what I want.</p>

<p><strong>So the next thing I did was attach a click event to my submit button</strong> so that I could customize <code>onbeforeunload</code>&#8217;s typical functionality.</p>

<pre><code>    $('#save-button').live('click', function(){
        window.onbeforeunload = function(){};
    });
</code></pre>

<p>I am basically redefining onebeforeunload in the scope of that specific click event. Here, nothing will happen. But if I click any other link on my page, the popup will still appear. I only defined <code>onbeforeunload</code> to do nothing in the scope of that one specific click event.</p>

<p>Resources:<br>
1. https://developer.mozilla.org/en-US/docs/Web/API/window.onbeforeunload <br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Write Rspec Mailer Tests]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/08/05/how-to-write-rspec-mailer-tests/"/>
    <updated>2013-08-05T20:17:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/08/05/how-to-write-rspec-mailer-tests</id>
    <content type="html"><![CDATA[<p><strong><em>The last few weeks have been a whirl-wind of building, which has been so wonderful.</em></strong> I really feel like I got to flex my muscles a little bit (I learned to encrypt things..post to come later) but the other side of building is testing. I built three different mailers, and then learned that you can actually test your mailers with rspec. And it&#8217;s not that difficult!</p>

<p><strong>I chose a few very basic pieces of mailer functionality to test:</strong><br>
1. Was it actually sending the email<br>
2. Was the email being sent to the desired recipient<br>
3. Was the subject line of the email correct<br>
4. Was the email being sent from the correct address</p>

<p><strong>This was also really helpful because up until this week, we&#8217;ve only been able to test mailers locally.</strong> These Rspec tests were essentially the only way I was able to tell if the mailers were functioning how I wanted them to function.</p>

<p>So here was my mailer method:</p>

<pre><code>def confirmation_email(ordered_story)
  mail(to: story.email, subject: "Here Is Your Story!", content_type: "text/html")
end
</code></pre>

<p><strong>In my mailer spec, the first thing I did was set up a few configurations</strong> for ActionMailer that I declared to happened before each test.</p>

<pre><code>  before(:each) do
    ActionMailer::Base.delivery_method = :test
    ActionMailer::Base.perform_deliveries = true
    ActionMailer::Base.deliveries = []
    @story = Factory.create(:story)
    EbookConfirmationMailer.confirmation_email(@story).deliver
  end
</code></pre>

<p>I&#8217;m basically saying: send my emails in the testing environment (which does have to be explicitly declared), please actually perform all my deliveries, create an array of all my sent emails, build the factory for my story class (with an instance of that class), and then finally deliver my email.</p>

<p><strong>Then, I wanted to clear all of that after each test so I have a clean slate before each test.</strong></p>

<pre><code>after(:each) do
  ActionMailer::Base.deliveries.clear
end
</code></pre>

<p><strong>So now that I have all of that set up, the tests.</strong></p>

<p><strong>1. Is the email being sent?</strong></p>

<pre><code>  it 'should send an email' do
    ActionMailer::Base.deliveries.count.should == 1
  end
</code></pre>

<p>I had originally set up my array of delivered emails, so in this test, there should only be one email. My before statement only called one email to be delivered.</p>

<p><strong>2. Is the email being sent to the desired recipient?</strong></p>

<pre><code>  it 'renders the receiver email' do
    ActionMailer::Base.deliveries.first.to.should == @story.email
  end
</code></pre>

<p>The Story class, has an email attribute, which is what is declared as the <code>to:</code> in my mailer method. The Story Factory builds an instance of the class with an email address which is the one that should be used to send the email (@story.email).</p>

<p><strong>3. Does the email have the correct subject line?</strong></p>

<pre><code>  it 'should set the subject to the correct subject' do
    ActionMailer::Base.deliveries.first.subject.should == 'Here Is Your Story!'
  end
</code></pre>

<p>The subject line of the email was expplicitly defined in my mailer. So if my email is sending properly, that subject line should be rendered in the email.</p>

<p><strong>4. Was the email being sent from the correct addres?</strong></p>

<pre><code>  it 'renders the sender email' do  
    ActionMailer::Base.deliveries.first.from.should == ['notifications@stories.com']
  end
</code></pre>

<p>When I defined my mailer, I defined a default from address <code>default :from =&gt; "notifications@stories.com"</code>
So just like the subject line, if the email is being sent properly, that should be the from address, plain and simple.</p>

<p>I guess the next step with these will be testing the mailer views (I also recently learned that you can write tests for views! Cool!)..so clearly I have lots more blog posts to write.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Things I Learned About Encryption]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/08/01/5-things-i-learned-about-encryption/"/>
    <updated>2013-08-01T19:49:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/08/01/5-things-i-learned-about-encryption</id>
    <content type="html"><![CDATA[<p><strong><em>So I was recently asked to encrypt an id</em></strong>, and then somehow take that encryption and display it as part of a URL. Essentially, it was a mock form of security for a new feature at work, so that a user couldn&#8217;t just change an id in a url and move around things that should remain private.</p>

<p>_Encryption is an entirely new concept to me.__ I didn&#8217;t even know what it really meant. So it was a really big learning exercise for me. Ps. Encryption means to convert data into cipher. Oh and cipher is &#8220;diguised way of writing code&#8221; (thanks <a href="https://www.google.com/search?q=cipher+definition&oq=cipher+definition&aqs=chrome.0.0l4.1710j0&sourceid=chrome&ie=UTF-8"> Google </a>).</p>

<p><strong>1. Ruby has an OpenSSL library used for encryption.</strong>
This library has greate documention <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL.html"> here </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How--and when--To Use A Struct]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/07/24/when-to-use-a-struct/"/>
    <updated>2013-07-24T20:04:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/07/24/when-to-use-a-struct</id>
    <content type="html"><![CDATA[<p><strong><em>Recently I&#8217;ve been going through my ever growing (and then shrinking, and then growing again)</em></strong> list of new things/situations I&#8217;ve been introduced to via my code base at work. Which lead me to dig a little deeper into Ruby structs.</p>

<p><strong>A struct is a simple way to bundle attributes together</strong> without having to explicitly define a class, all the while giving you accessor methods for those attributes. You can read the Ruby Docs about structs <a href="http://www.ruby-doc.org/core-1.9.3/Struct.html">here</a>.</p>

<p><strong>We&#8217;ll use the example of creating people.</strong></p>

<p><strong>A struct can be created very easily in two different ways:</strong></p>

<pre><code>  Struct.new("Person", :name, :age, :address)
  Person = Struct.new(:name, :age, :address)
</code></pre>

<p>So now we have our Person struct, <code>Struct::Person</code>. This gives us really easy accessor methods for all three attributes of the struct that we defined.</p>

<p><strong>We can easily create new instances of this struct:</strong></p>

<pre><code>  Struct::Person.new("Victoria", 24, "1835 University Circle")
  victoria = Person.new("Victoria", 24, "1835 University Circle")
</code></pre>

<p><strong>So how do we access the attribtues of this new instance of the struct?</strong></p>

<pre><code>  victoria["name"] #=&gt; "Victoria"
  victoria["age"] #=&gt; 24
  victoria["address"] #=&gt; "1835 University Circle"
</code></pre>

<p><strong>You can also change the values of an instance of the struct:</strong></p>

<pre><code>  victoria["name"] = "Vic"
  victoria["name"] #=&gt; "Vic"
</code></pre>

<p><strong>So what&#8217;s the difference between Struct and OpenStruct?</strong> OpenStruct doesn&#8217;t require explicitly defined attributes. You can create them on the fly.</p>

<pre><code>person = OpenStruct.new
person.name = "Victoria"
person.age = 24
person.date_of_birth = "June 1, 1988"
</code></pre>

<p>Notice when we created the OpenStruct, we didn&#8217;t define any attribute fields, just the name.</p>

<p><strong>Both Struct and OpenStruct closely resemble a hash, so why not just use that?</strong>
You should think of a Struct as a convience class when you just want to store attributes and read/write to them with regular methods. A hash is a possibility, but a hash isn&#8217;t fixed. There can be an infinite and varying number of key-value pairs. A Struct is the way to go when modeling out more complex objects with a known set of attributes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Use State Machine]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/07/16/how-to-use-state-machine/"/>
    <updated>2013-07-16T20:11:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/07/16/how-to-use-state-machine</id>
    <content type="html"><![CDATA[<p><strong>A few weeks ago, I was introduced to an incredible gem called State Machine</strong> (you can read their docs <a href="http://slagyr.github.io/statemachine/documentation.html">here</a>). The gem keeps track of the status of a specific object and respeonds to different inputs to alter that state. The example that I&#8217;ve understood the most is in purchasing something (I&#8217;m going to use a pack of gum in this post).</p>

<p><strong>The gem breaks down into four different parts:</strong></p>

<ol>
<li><p>State- the status of the object.
All states are predefined in the class. All objects start in the initial state. The first step to buying a pack of gum is to select it. So the pack of gum would move from initial to selected.<br></p></li>
<li><p>Transition- the movement from one state to another.
A pack of gum would transition from the initial state to the selected, and then again transition to the queued state when the user is in line to purchase it.</p></li>
<li><p>Event- The invocation of a state.
A pack of gum would transition from the initial state to the selected, by way of an event. Another event would trigger the queued state.</p></li>
<li><p>Action- State Machine can trigger different methods before, during, and after transitions.</p></li>
</ol>


<p><strong>So let&#8217;s further elaborate on this example of buying a pack of gum.</strong></p>

<p><strong>What states would there be?</strong><br>
<li>Selected - I deciced I want zebra gum, so now I&#8217;m holding it</li>
<li>Queued - waiting in line to purchase</li>
<li>Purchased - handing money to cashier</li>
<li>Owned - I own and can do whatever I want with the gum</li>
<li>Trash- After I chew the gum, it&#8217;s garbage</li></p>

<p><strong>Here is an example of a class set up with State Machine,</strong> and then I&#8217;ll go through and explain each step.</p>

<pre><code>  class Gum
    attr_accessor :flavor, :price, :state

    state_machine :initial =&gt; :selected do

      before_transition :on =&gt; purchased :do =&gt; :demand_money
      after_transition :on =&gt; owned, :do =&gt; :be_chewed


      event :queue do
        transition :selected  =&gt; :queued_for_purchasing
      end

      event :purchase
        transition :queued_for_purchasing =&gt; :purchased
      end

      event :ownership
        transition :purchased =&gt; :owned
      end

      event :trash do
        transition :owned =&gt; :trash
      end


      state :queued do
        def is_queued?
          return true
        end
      end

      state :purchased do
        def is_purchased?
          return true
        end
      end

      state :owned do
        def is_owned?
          return true
        end
      end

      state :trash do
        validate { |gum| gum.trash? }
        def is_trash?
          return true
        end
      end

    end

    def demand_money
      #demand money here
    end

    def be_chewed
      # method to prepare piece of gum to be chewed
    end


  end
</code></pre>

<p><strong>So how does this work?</strong></p>

<p>State Machine first gets included in your Gemfile.</p>

<p>From there, the set up is all done from inside the class where the objects change states. All objects start in the <code>initial</code> state, which is defined with when State Machine is invoked:</p>

<pre><code>  state_machine :initial =&gt; :selected do
</code></pre>

<p><strong>Next, the states must be defined:</strong></p>

<pre><code>  state :queued do
    def is_queued?
      return true
    end
  end

  state :purchased do
    def is_purchased?
      return true
    end
  end

  state :owned do
    def is_owned?
      return true
    end
  end

  state :trash do
    validate { |gum| gum.trash? }
    def is_trash?
      return true
    end
  end
</code></pre>

<p><strong>Following, the events must be defined:</strong></p>

<pre><code>  event :queue do
    transition :selected  =&gt; :queued_for_purchasing
  end

  event :purchase
    transition :queued_for_purchasing =&gt; :purchased
  end

  event :ownership
    transition :purchased =&gt; :owned
  end

  event :trash do
    transition :owned =&gt; :trash
  end
</code></pre>

<p>Here, the events specify transitions between states. These events can be triggered in the command line as well, which would trigger new states. The state is saved as an attribute of an instance of the class.</p>

<p><strong>Then, the actions to be called must be defined:</strong></p>

<pre><code>   def demand_money
      #demand money here
    end

  def be_chewed
    # method to prepare piece of gum to be chewed
  end
</code></pre>

<p><strong>Finally, the actions must know to be called during transitions:</strong></p>

<pre><code>  before_transition :on =&gt; purchased :do =&gt; :demand_money
  after_transition :on =&gt; owned, :do =&gt; :be_chewed
</code></pre>

<p><strong>So, to test the flow of all of this in command line,</strong> there is a handy method <code>fire_events</code>. That method looks like this:</p>

<pre><code>  gum = Gum.first
  gum.state #=&gt; selected
  gum.fire_events(:queue) #this transitions the gum from selected to queued_for_purchase
  gum.state #=&gt; queued_for_purchase
</code></pre>

<p>The only thing to know is that you cannot rollback states through triggering events. You can however explictitely redefine the state (<code>gum.state = "selected"</code>) and from there retrigger the events.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to say_with_time]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/07/11/an-introduction-to-say-with-time/"/>
    <updated>2013-07-11T22:03:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/07/11/an-introduction-to-say-with-time</id>
    <content type="html"><![CDATA[<p>I don&#8217;t think I will ever know everything about Rails. And that&#8217;s part of its magic, every day there is something that makes me go &#8220;Woah, cool!&#8221;</p>

<p>Meet, <code>say_with_time</code>, a really handy little method used in migrations to create a more readable output. This is especially useful when your migrations are doing more than one simple task. I&#8217;ve seen it used during a migration that loads a yaml file. What? I didn&#8217;t even know you could do that.</p>

<p><code>say_with_time</code> is a method called directly in the body of a migration during the <code>up</code>, <code>down</code> or <code>change</code> methods. You must pass a block to the method, which controls the entire migration.</p>

<pre><code>  def up
    say_with_time "adding columns email and deleted_at to profiles" do
      add_column :profiles, :email 
      add_column :profiles, :deleted_at
    end
  end

  def down
    say_with_time "removing columns email and deleted_at from profiles"
      remove_column :profiles, :email
      remove_column :profiles, :email
    end
  end
</code></pre>

<p>The output of running the migration will include the entire quote as well as a benchmark for when the migration was complete.</p>

<p>Easy and efficient way to control your output from migrations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Use Git With SVN]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/07/11/how-to-use-git-with-svn/"/>
    <updated>2013-07-11T08:29:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/07/11/how-to-use-git-with-svn</id>
    <content type="html"><![CDATA[<p><strong><em>My first three weeks at work have been a whirlwind of new information.</em></strong> And even though I am now fully able to contribute and build, I still have a running list of things to research and learn and fully comprehend. One of those things goes back to day one when I was cloning the repositories. &#8220;We use SVN repositories&#8221; I was told.</p>

<p><strong>So SVN and Git are the same thing, only different.</strong> SVN is an open source version control system, developed by Apache. Git is also an open source version control system, only developed by Linus Torvalds for the development of the Linux Kernel. While they have the same purpose, there are a few subtle differences in how the respositories work.</p>

<p><strong>A SVN repository doesn&#8217;t have strict configuration requirements like a git repository.</strong> In fact, you can even have multiple projects in the same repository. Because git keeps track of a full history of all branches in a repository, multiple projects in one isn&#8217;t the best idea.</p>

<p><strong>Another subtle difference is that the main branch in SVN is called <code>trunk</code>.</strong> You use the commands <code>svn copy</code> and <code>svn merge</code> to work on feature branches and merge them back to <code>trunk</code>.</p>

<p><strong>At first I wondered if I needed to learn how SVN works.</strong> But then came the question, &#8220;Do you use SVN or git?&#8221; Once I replied that I use git, I was told I could still use it locally. Wonderful. I just needed to know the basic SVN commands to clone the repositories, and a few things about committing changes.</p>

<p><strong>So Git and SVN can work together. How?</strong> Git has a bridge to svn, using the command <code>git svn</code>. This command prefaces everything.</p>

<p><strong>When I cloned my work repository, the command began with <code>git svn clone</code>,</strong> which clones my remote SVN repository into a local git repository. So from there I am in a local git environment. All my git commands for creating new branches, merging that branch to master, etc. all work!</p>

<p><strong>So then the moment came when I finally contributed something to the code to commit. Now what?</strong><br>
1. I do my usual: <code>git commit -m "&lt;my commit message&gt;" &lt;file_name_to_commit&gt;</code> <br>
2. Then you have to commit with svn, so it&#8217;s actually committed to the SVN repository: <code>git svn dcommit</code></p>

<p>And really that&#8217;s it. Easy as pie.</p>

<p><strong>Total side note,</strong> but I learned about <code>git stash</code> and <code>git stash apply</code> and wanted to share that tidbit. <code>git stash</code> allows you to stash away half-finished work, commit finished work, and then return to it later with <code>git stash apply</code>. You can read more about it <a href="http://git-scm.com/book/en/Git-Tools-Stashing">here</a>.</p>

<p><strong>Great Resources:</strong><br>
1. https://help.github.com/articles/what-are-the-differences-between-svn-and-git <br>
2. http://git-scm.com/book/ch8-1.html <br>
3. http://blogs.wandisco.com/2011/10/24/subversion-best-practices-repository-structure/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Use ActiveResource (and how it works for you)]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/07/09/how-to-use-activeresource-and-how-it-works-for-you/"/>
    <updated>2013-07-09T20:22:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/07/09/how-to-use-activeresource-and-how-it-works-for-you</id>
    <content type="html"><![CDATA[<p><strong><em>ActiveResource provides an interface for communication between Rails applications.</em></strong> I came across ActiveResource in my databaseless classes at work that I mentioned <a href="http://vicfriedman.github.io/blog/2013/07/03/how-to-use-activemodel-callbacks/">in my previous post</a>. Essentially, all of our user functionality (logging in, creating a profile with attributes, etc.) is handled by one application and the meat of the site by another.</p>

<p><strong>And this is where ActiveResource comes in handly.</strong> In the simplest of terms, ActiveResource::Base is the main class, which maps RESTful resources as models in a rails application. This boils down to your RESTful resources becoming mutable Ruby objects. ActiveResource acts just like ActiveRecord, so it&#8217;s very easy to understand at a first look. The only difference is that ActiveResource deals with HTTP resources that are built on standard JSON or XML request formatting as opposed to dealing with a database. In fact, if I hadn&#8217;t noticed the: <code>class Profile &lt; ActiveResource::Base</code>, I might have thought I was dealing with ActiveRecord objects.</p>

<p><strong>So let&#8217;s take the example of this Profile class.</strong></p>

<p><strong>The first step is to create a model class (one that does not have a migration)</strong> that inherits from  <code>ActiveResource::Base</code> and that provides a site class variable.</p>

<pre><code>class Profile &lt; ActiveResource::Base 
  self.site = "http://api/profiles:3000"
end
</code></pre>

<p>My Profile class will be using ActiveResource to talk back and forth with <code>"http://api/profiles:3000"</code></p>

<p><strong>Object manipulation in ActiveResource uses standard RESTful requests:</strong><br>
  1. GET requests for finding and retrieving resources<br>
  2. POST requests for creating new resources<br>
  3. PUT requests for updating resources<br>
  4. DELETE requests for destroying resources</p>

<p><strong>Creating an object will come from sending a POST request to the api.</strong>
Using methods available to ActiveResource, this will look like:</p>

<pre><code>  Victoria = Person.new(:first_name =&gt; "Victoria")
</code></pre>

<p>Looks a lot like ActiveResource huh? So what is ActiveResource actually doing here?</p>

<pre><code>  POST http://api/profiles/localhost:3000/profiles.json
</code></pre>

<p>It&#8217;s sending a POST` request to the JSON of the profiles application. The body of the request looks something like this:</p>

<pre><code>  {"Profile": {"first_name": "Victoria", "last_name": "Friedman"} }
</code></pre>

<p>The response you should get back is a 201 HTTP status code, which means the request has been fulfilled, as well as notification that your Ruby object was created.</p>

<p><strong>So now that we have an instance of my Profile class, how about we try and retrieve it.</strong> Finding an object with ActiveResource uses a GET request. With ActiveResource methods, this looks like:</p>

<pre><code>  Victoria = Profile.find(1)
</code></pre>

<p>Again, the exact same thing as ActiveRecord. So how does this GET request come into play? A GET request is sent to http://api/profiles:3000/profiles/1.json. That&#8217;s the JSON to Victoria Friedman&#8217;s profile. Each JSON element becomes an attribute of an instance of my Profile class. I can also find all people by calling:</p>

<pre><code>  profiles = Profile.all
</code></pre>

<p>This will return an array of JSON that looks something like this:</p>

<pre><code>  [ {"id": 1, "first_name": "Victoria", "last_name": "Friedman"},
    {"id": 2, "first_name": "Megan", "last_name": "Smith"},
    {"id": 3, "first_name": "Catherine", "last_name": "Brooks"},
  ]
</code></pre>

<p><strong>So now we want to update an instance of our Profile class.</strong> This works the same in ActiveResource as ActiveRecord but uses a PUT request:</p>

<pre><code>  Victoria = Profile.find(1)
  Victoria.first_name =&gt; 'Victoria'
  Victoria.first_name = 'Vic'
  Victoria.save
</code></pre>

<p>Now my name is saved as Vic. This submits a PUT request with a body that looks like this:</p>

<pre><code>  {"person": {"first_name": "Vic"}}
</code></pre>

<p>This request returns an empty response with a 204 HTTP status code.</p>

<p><strong>So lastly, let&#8217;s delete a resource. ActiveResource sends a DELETE request to the api.</strong></p>

<pre><code>  Vic = Person.find(1)
  Vic.destroy
  Vic.exists? =&gt; false
</code></pre>

<p>This DELETE request sends an empty 200 HTTP status code as response.</p>

<p><strong>And voila, ActiveResource!</strong><br></p>

<p><strong>Resources:</strong><br>
1. http://apidock.com/rails/ActiveResource/Base<br>
2. http://railscasts.com/episodes/94-activeresource-basics</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Use ActiveModel::Callbacks]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/07/03/how-to-use-activemodel-callbacks/"/>
    <updated>2013-07-03T07:53:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/07/03/how-to-use-activemodel-callbacks</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>My first big task at work has been to fix all the broken tests in our test suite.</em></strong> It&#8217;s actually a great assignment. I&#8217;ll learn all the intricacies and relationships of the code, without the risk of breaking something major&#8230;the tests are already broken.</p>

<p><strong>While reviewing one of the model specs today,</strong> I came across something that I was not familiar with: ActiveModel::Callbacks</p>

<p><strong>A callback is a method that acts as a hook into the life cycle of an object.</strong> Callbacks allow you to trigger logic before or after the alteration of an ActiveRecord object.</p>

<p><strong>ActiveModel callbacks are an interface for any class to have ActiveRecord-like callbacks</strong>, used especially in the case of databaseless models. In <a href="http://railscasts.com/episodes/219-active-model?view=comments">this</a> Rails Cast, Ryan Bates gives a great intro to ActiveModel and how to get it up and running in your app. In the example of my code, we are just using the callbacks module. ActiveModel also provides a bunch of other modules, including but not limited to: naming, serialization, validations, etc. You can find the entire list <a href="http://api.rubyonrails.org/classes/ActiveModel.html">here</a>.</p>

<p><strong>The first step to use any of the modules is to <code>include</code> or <code>extend</code> the module in your class.</strong> See my <a href="http://vicfriedman.github.io/blog/2013/03/17/inheritence/">previous post</a> for an explanation on the difference between those options to mix in a modules functionality.</p>

<pre><code>  class Pet
    extend ActiveModel::Callbacks
  end
</code></pre>

<p>Here, I chose to <code>extend</code> the module because I want the methods to become class methods.</p>

<p><strong>The next step is to define a list of methods to which you would like to attach the callbacks:</strong></p>

<pre><code>  class Pet
    extend ActiveModel::Callbacks

    define_model_callbacks :create, :destroy, :update
  end
</code></pre>

<p>For example purposes, I chose to include three common callbacks. Once you defined the methods that are attached to callbacks, they now have access to all three standard callbacks <code>before</code>, <code>after</code>, and <code>around</code>.
To take <code>create</code> as an example, I now have <code>before_create</code>, <code>after_create</code>, and <code>around_create</code> accessible to me.</p>

<p><strong>The next thing is to actually define the <code>create</code>, <code>destroy</code>, and <code>update methods</code>.</strong></p>

<pre><code>  class Pet
    extend ActiveModel::Callbacks

    define_model_callbacks :create, :destroy, :update

    def create
      _run_create_callbacks do
        ##CODE TO EXECUTE HERE
      end
    end


    def update
      _run_update_callbacks do
        ##CODE TO EXECUTE HERE
      end
    end


    def destroy
      _run_destroy_callbacks do
        ##CODE TO EXECUTE HERE
      end
    end

  end
</code></pre>

<p>You can also shorthand this:</p>

<pre><code>def create; _run_create_callback { #CODE_HERE }; end
def update; _run_update_callback { #CODE_HERE }; end
def destroy; _run_destroy_callback { #CODE_HERE }; end
</code></pre>

<p><strong>And finally, now you can use your callbacks!</strong></p>

<pre><code>  class MyClass
    extend ActiveModel::Callbacks

    define_model_callbacks :create, :destroy, :update

    before_update :my_method

    def create
      _run_create_callbacks do
        ##CODE TO EXECUTE HERE
      end
    end


    def update
      _run_update_callbacks do
        ##CODE TO EXECUTE HERE
      end
    end


    def destroy
      _run_destroy_callbacks do
        ##CODE TO EXECUTE HERE
      end
    end

    def my_method
      puts "This is my method"
    end

  end
</code></pre>

<p>I have used mine here, so before any instance of <code>MyClass</code> is updated, <code>my_method</code> is run, which will just print the string &#8220;This is my method&#8221;.</p>

<p>Also, in playing around, I discovered that you can literally name your callbacks whatever you want. I tried with <code>fun</code>, which would look something like this:</p>

<pre><code>  class Pet
    extend ActiveModel::Callbacks

    define_model_callbacks :fun

    before_fun :my_method

    def fun
      _run_fun_callbacks do
        ##CODE TO EXECUTE HERE
      end
    end

    def my_method
      puts "This is my method"
    end

  end
</code></pre>

<p>The possibilities are ENDLESS. Literally.</p>

<ol>Great Resources:
  <li>http://api.rubyonrails.org/classes/ActiveModel/Callbacks.html</li>
  <li>http://jeffgardner.org/2011/05/26/adding-activerecord-style-callbacks-to-activeresource-models/</li>
  <li>http://railscasts.com/episodes/219-active-model</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sql indexes]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/06/27/sql-indexes/"/>
    <updated>2013-06-27T22:10:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/06/27/sql-indexes</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>In my last post, I mentioned that <code>unique</code> is a reserved word in SQL because of indexes.</em></strong> But to be totally honest, that was the first time I&#8217;d even heard of indexes. So I did some more research&#8230;and they&#8217;re actually pretty cool.</p>

<p><strong>Basically, an index is a special lookup for tables in a database that are used</strong> to speed up data retrieval, aka quicker queries using <code>WHERE</code> and <code>SELECT</code> clauses. In even simpler terms, it&#8217;s a pointer to specific data. Only downside is that it slows down data inputs with <code>UPDATE</code> and <code>INSERT</code> clauses. Also, indexes can be created or dropped easily, and will have no effect on the code.</p>

<p><strong>So first things first, you want to create an index. This process is incredibly simple:</strong></p>

<pre><code>  CREATE INDEX index_name
  on table_name (column_name);
</code></pre>

<p><strong>For example, I have a <code>recipes</code> table, and that table has the columns</strong> <code>name</code>, <code>ingredients</code>, and <code>preparations</code>. And say you want to be able to easily query for recipes with a specific ingredient, this would be a great time to use an index.</p>

<pre><code>  CREATE INDEX recipe_ingredients
  on recipes (ingredients);
</code></pre>

<p>Super easy.</p>

<p><strong>Now, there are a few different kinds of indexes:</strong></p>

<p><strong>1. Unique Index: allows no duplicate values to be inserted</strong> in the selected column in your table.</p>

<pre><code>  CREATE UNIQUE INDEX recipe_ingredients
  on recipes (ingredients);
</code></pre>

<p>It&#8217;s simple to create a unique index, but there is an appropriate moment to use it. The above example is the proper way to create a unique index, but not it&#8217;s proper use. You wouldn&#8217;t be able to include butter in more than one recipe. Or salt. Or hot sauce. Not ok.</p>

<p><strong>2. Composite Index: used on two or more columns in a table.</strong></p>

<pre><code>CREATE INDEX recipes
on recipes (ingredients, preparations);
</code></pre>

<p>This index will allow speedy retrieval of data in both the <code>ingredients</code> column and the <code>preparations</code> column.</p>

<p><strong>3. Implicit Index: this is an implied index, that is automatically</strong> created with the formation of a PRIMARY_KEY column, or UNIQUE_KEY column. Any time your table has an ID column, you have an implicit index on that column.</p>

<p><strong>Obviously, you need to know how to get rid of an index.</strong> It&#8217;s also really simple and will not affect your data in any way.</p>

<pre><code>  DROP INDEX index_name;
  DROP INDEX recipes;
  DROP INDEX recipe_ingredients;
</code></pre>

<p>Now we got rid of all the indexes (except the implicit index) on my recipes table.</p>

<p><strong>So of course Rails has built in methods with ActiveRecord to deal with indexes.</strong> The declaration for indexes in rails is included in your migrations, but the methods must become class methods&#8230;.</p>

<pre><code>add_index :table_name, :column_names, options
</code></pre>

<p>Your options include <code>:name</code>, <code>:unique</code>, and <code>:order</code></p>

<p><strong>So to take my same example of my recipes table from before</strong> and the migration AddIndexesToRecipes:</p>

<pre><code>  def self.up
    add_index :recipes, ingredients, :name =&gt; 'recipe_ingredients'
  end  
</code></pre>

<p>In this example, I created an index on my recipes table, on the ingredients column, and I named the index &#8220;recipe_ingredients&#8221;. If I had used <code>:unique</code>, I would have created the same problem as before, where my cookies could have butter, but my cake couldn&#8217;t. No thanks.</p>

<p><strong>Rails also makes it really simple to remove indexes,</strong> and there are two ways to do so:</p>

<ol>
<li><p>Remove an index by column name:
   remove_index (table_name, column: column_name)
   remove_index (recipes, column: ingredients)</p></li>
<li><p>Remove an index by index name:
   remove_index (table_name, name: index_name)
   remove_index (recipes, name: recipe_ingredients)</p></li>
</ol>


<ol>Helpful Resources:
  <li>http://www.tutorialspoint.com/sql/sql-indexes.htm</li>
  <li>http://api.rubyonrails.org/classes/ActiveRecord/Migration.html</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sql has its moments]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/06/25/sql-has-its-moments/"/>
    <updated>2013-06-25T21:44:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/06/25/sql-has-its-moments</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong>Today I learned, among a million other things, that I will never escape SQL statements.</strong> I think I&#8217;ve finally faced it. During week 6 at <a href="http://flatironschool.com">The Flatiron School</a>, when the magic of Rails and ActiveRecord was introduced, my entire class celebrated the fact SQL statements were abstracted away. We could write RUBY and still retrieve the same data, AUTOMAGICALLY. But let&#8217;s face it&#8230; SQL will always be around.</p>

<p><strong>What do you do when you have a huge app running with over 100 instances,</strong> a mega-goliath database with more migrations and data entries than I&#8217;ve ever seen, and on top of those daunting figures, project managers wanting specific data for metrics.You use a SQL GUI and you write SQL statements.</p>

<p><strong>So this is how I came across a really interesting discovery.</strong> Well two actually: SQL has <code>count</code> and <code>distinct</code> keywords available with which to write queries.</p>

<p>Here is an example of a table I was working on. This table is called photos:
  <img src="http://vicfriedman.github.com/images/post_images/photos_table2.png"></p>

<p><strong>I was told to write SQL queries to find the number of photos</strong> that have been uploaded by users in the last three weeks (so from after June 6), as well as the number of users that have updated photos.</p>

<p><strong>1. Number of photos uploaded by users on or after June 6, 2013:</strong></p>

<p><code>select count(id) from photos where user_id is not null and created_at &gt;= 6/6/2013</code></p>

<p>This command is parsing through the data in our database, finding all instances where a user_id is present (in this case all of them), as well as parsing through the created_at dates to find a match and returning to us that number of photos.
This command should return five, as there are five photos uploaded by users in the sample database.</p>

<p><strong>2. Number of users who have uploaded photos on or after June 6, 2013:</strong></p>

<p>The next query was a little bit more challengeing because I was unaware of the SQL <code>distinct</code> method.</p>

<p>Originally, I had:</p>

<p><code>select count(profile_id) from photos where profile_id is not null and created_at &gt;= 6/6/2013</code></p>

<p> But this query returns five.The problem with this query wasn&#8217;t immediately obvious to me. Count doesn&#8217;t discrimate against repeated entries. There are FIVE cells with a user_id, just not five unique id&#8217;s.</p>

<p>My first thought was the <code>uniq</code> method. Like when you have an array that contains duplicates, you can call <code>uniq</code> on that array to return that array with the duplicates removed. But unique is a reserved word in SQL, and is used to create unique indexes (an index can be created in a table to find data more easily and efficiently). So that&#8217;s when I was introduced to <code>distinct</code>.</p>

<p>With that new knowledge, I was able to correct my first attempt at the query,</p>

<p><code>select count(distinct user_id) from photos where user_id is not null and created_a &gt;= 6/6/2013</code></p>

<p>And that statement returns the correct result, which is three.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oracle instant client]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/06/24/oracle-instant-client/"/>
    <updated>2013-06-24T21:00:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/06/24/oracle-instant-client</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>So today was my first day as a Software Engineer at Time Inc.</em></strong> I can already tell it&#8217;s going to be such an incredible learning experience, and all we did was environment setup today.</p>

<p><strong>The hardest part about all of this, was setting up the client for an Oracle database.</strong> An Oracle database is an object-relational database management system, which means that it is similar to a relational-database but uses an object-oriented model. Essential, it supports objects, classes and inheritence directly in the database schemas and query language, as well as supports custom data-types and methods.</p>

<p>The process of installing took me roughly 4 hours, even with the help of some great blog guides. So I thought I would give it a go at simplyifying the process even further.</p>

<p><strong>1. The first step is to find your operating system in order to download the necessary components.</strong> I was using a Mac OS X Intel. Those options can be found <a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html">here </a>.</p>

<br>


<p><strong>2. Download Instant Client Basic, SDK and SQL*Plus.</strong> SDK stands for software development kit, and is a set of developer tools. SQLPlus is a command line tool for making SQL queries to an Oracle database. Those options can be found <a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html">here</a>. One thing I will make note of, I originally tried downloading the latest Version, 11.2.0.3.0, but ended up having to remove all those directories and start over again with Version 10.2.0.4 with the 64-bit package.</p>

<br>


<p><strong>3. When I downloaded the instant client, SDK and SQLPlus, they were already unzipped,</strong> so I was able to bypass that step (I was using OS X, 10.8.5). The next step was to make a directory to store instant client: <code>mkdir ~/opt/oracle</code></p>

<br>


<p><strong>4. Because instant client, SQL*Plus and SDK all download into different directories,</strong> I combined the SQLPlus and SDK directories into the instant client directory, making everything much more compact.</p>

<br>


<p><strong>5. Next, I moved my instantclient directory into my <code>/opt/oracle</code> directory:</strong> <code>mv instantclient /opt/oracle</code></p>

<br>


<p><strong>6. Setting up sym links to the libraries:</strong></p>

<pre><code>  ln -s libclntsh.dylib.10.1 libclntsh.dylib
  ln -s libocci.dylib.10.1 libocci.dylib
</code></pre>

<br>


<p><strong>7. The next step is to set up <code>ORACLE_HOME</code>, <code>NLS_LANG</code> and <code>DYLD_LIBRARY_PATH</code> variables.</strong> I chose to set up my variables inside my .bash_profile:</p>

<pre><code>  export ORACLE_HOME=/opt/oracle
  #export ORACLE_HOME=/usr/local/oracle
  export DYLD_LIBRARY_PATH=$ORACLE_HOME/instantclient
  export LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
  export SQLPATH=$ORACLE_HOME/instantclient
  export ARCHFLAGS="-arch x86_64"
  export NLS_LANG="AMERICAN_AMERICA.UTF8"
  export TNS_ADMIN=$ORACLE_HOME/network/admin
  export PATH=$PATH:$MAVEN_HOME/bin:$SVN_HOME/bin:$GIT_HOME/bin:$AMQ_PATH/bin:$DYLD_LIBRARY_PATH
</code></pre>

<p>Obviously, these paths will change base on your own selection for directory names.</p>

<br>


<p><strong>8. The final step is to put SQL*Plus in your $PATH.</strong> I did this by creating a symlink (I already had usr/local/bin in my $PATH)</p>

<pre><code>  ln -s /opt/oracle/instantclient/sqlplus /usr/local/bin/sqlplus
</code></pre>

<p>You can test to make sure this works by running <code>which sqlplus</code>, which should return <code>/usr/local/bin/sqlplus</code></p>

<p><strong>9. The final step is to test it all out! Try running <code>gem install ruby-oci8</code></strong> and Oracle instant client should be all set up!</p>

<ul>__Helpful Links:__
  <li>http://ruby-oci8.rubyforge.org/en/file.install-instant-client.html</li>
  <li>http://www.pixellatedvisions.com/2009/03/25/rails-on-oracle-part-1-installing-the-oracle-instant-client-on-mac-os-x</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pluck]]></title>
    <link href="http://vicfriedman.github.com/blog/2013/06/05/pluck/"/>
    <updated>2013-06-05T09:59:00-04:00</updated>
    <id>http://vicfriedman.github.com/blog/2013/06/05/pluck</id>
    <content type="html"><![CDATA[<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38989132-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>


<p><strong><em>Recently during a pairing session, I learned about the ActiveRecord query, <code>pluck</code>.</em></strong> Essentially, it performs a single column select and returns an array of that data.</p>

<p>Say you have a Person class, and you want to select all the names for everyone in that class, all you would need to call is:</p>

<pre><code>  Person.pluck(:name)
  =&gt;["Victoria", "Nat", "Peach"]
</code></pre>

<p>Essentially, this is like calling,</p>

<pre><code>  SELECT name FROM person;
</code></pre>

<p>You can also use <code>pluck</code> to replace using <code>collect</code> and <code>map</code>.</p>

<pre><code>  Person.select(:name).map { |p| p.name }
  =&gt;["Victoria", "Nat", "Peach"]
</code></pre>

<p>Instead,</p>

<pre><code>  Person.pluck(:name)
  =&gt;["Victoria", "Nat", "Peach"]
</code></pre>

<p>Using <code>pluck</code> in this case is far more efficient than using map to return the same set of results. In the example with <code>map</code>, a full ActiveRecord Person record is returned and then the map is performed. <code>pluck</code> works directly at a database level, and only queries for exactly the information requested.</p>

<p><strong><em><ol>Helpful Links:</em></strong>
  <li>http://guides.rubyonrails.org/active_record_querying.html#pluck</li>
  <li>http://apidock.com/rails/ActiveRecord/Calculations/pluck</li>
  <li>http://blog.hashrocket.com/posts/rails-quick-tips-activerecord-calculations-pluck</li>
</ol></p>
]]></content>
  </entry>
  
</feed>
